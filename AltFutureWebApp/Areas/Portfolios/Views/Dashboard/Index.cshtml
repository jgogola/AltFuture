@using AltFuture.DataAccessLayer.Models.StoredProcs;
@model IEnumerable<PortfolioSummaryGetAll>
@{
    var bodyData = Model.Where(crypto => crypto.RowType == 1).ToList();
    var footerData = Model.Where(crypto => crypto.RowType == 99).ToList()[0];
}


<h1>Portfolio Dashboard</h1>

<nav class="navbar navbar-expand-sm navbar-light bg-light">
    <div class="container-fluid">
        <div id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" asp-controller="Transactions" asp-action="Index">Transaction Details</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" asp-controller="TransactionImports" asp-action="Index">Import New Transactions</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <!--Div for Crypto Investment Allocation Pie Chart-->
            <div id="chart_div"></div>
        </div>
        <div class="col-md-6">
            <!--Div for Crypto Investment Performance Column Chart-->
            <div id="columnchart_material"></div>
        </div>
    </div>

</div>

<div class="container mt-1">
    <table class="table table-striped">
        <caption>Crypto Asset Portfolio</caption>
        <thead class="table-dark">
            <tr class="text-center">
                <th scope="col">@Html.DisplayNameFor(model => model.CryptoName)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.TickerSymbol)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.NumberOfOrders)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.Quantity)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.AverageBuyPrice)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.Price)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.InvestmentTotal)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.FeeTotal)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.UnrealizedProfit)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.CurrentWorth)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var crypto in bodyData)
            {
                <tr>
                    <td class="text-nowrap">@crypto.CryptoName</td>
                    <th class="text-center" scope="row">@crypto.TickerSymbol</th>
                    <td class="text-center">@crypto.NumberOfOrders</td>
                    <td class="text-center">@crypto.Quantity</td>
                    <td class="text-end">@crypto.AverageBuyPrice</td>
                    <td class="text-end">@crypto.Price</td>
                    <td class="text-end text-success">@crypto.InvestmentTotal</td>
                    <td class="text-end text-danger">@crypto.FeeTotal</td>
                    <td class="text-end @(crypto.UnrealizedProfit >= 0 ? "table-success" : "table-danger")">@crypto.UnrealizedProfit</td>
                    <td class="text-end fw-bold">@crypto.CurrentWorth</td>
                </tr>
            }
        </tbody>
        <tfoot class="table-secondary">
            <tr>
                <td>@footerData.CryptoName</td>
                <th class="text-center" scope="row">@footerData.TickerSymbol</th>
                <td class="text-center">@footerData.NumberOfOrders</td>
                <td class="text-center">@footerData.Quantity</td>
                <td class="text-end">------</td>
                <td class="text-end">------</td>
                <td class="text-end text-success">@footerData.InvestmentTotal</td>
                <td class="text-end text-danger">@footerData.FeeTotal</td>
                <td class="text-end @(footerData.UnrealizedProfit >= 0 ? "table-success" : "table-danger")">@footerData.UnrealizedProfit</td>
                <td class="text-end fw-bold">@footerData.CurrentWorth</td>
            </tr>
        </tfoot>
    </table>

</div>





<!--Load the Google Chart AJAX API-->
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<!--Crypto Investment Allocation Pie Chart-->
<script type="text/javascript">

    // Load the Visualization API and the corechart package.
    google.charts.load('current', {'packages':['corechart']});

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawChart);

    // Callback that creates and populates a data table,
    // instantiates the pie chart, passes in the data and
    // draws it.
    function drawChart() {
        let jsonData;

        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAssetAllocationData", "Dashboard")",
            dataType: "json",
            async: false,
             success: function (d) {
                jsonData = d;
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("Error: " + textStatus, errorThrown);
            }
        });

        // Create our data table out of JSON data loaded from server.
        let data = new google.visualization.arrayToDataTable(jsonData);

        // Set chart options 
        let options = {
            'title': 'Crypto Investment Allocation',
            'width':400,
            'height':300,
            'is3D': true};

        // Instantiate and draw our chart, passing in some options.
        let chart = new google.visualization.PieChart(document.getElementById('chart_div'));
        chart.draw(data, options);
    }
</script>

<!--Crypto Investment Performance Column Chart -->
<script type="text/javascript">

    google.charts.load('current', { 'packages': ['bar'] });
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {

        let jsonData;

        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAssetPerformanceData", "Dashboard")",
            dataType: "json",
            async: false,
            success: function (d) {
                jsonData = d;
                console.log(jsonData);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("Error: " + textStatus, errorThrown);
            }
        });

        let data = new google.visualization.arrayToDataTable(jsonData);

        let options = {
            chart: {
                title: 'Crypto Investment Performance',
                subtitle: 'Investements and Current Worth',
               
            },
            colors: ['#3366cc', '#109618'],
           
        };

        let chart = new google.charts.Bar(document.getElementById('columnchart_material'));
        chart.draw(data, google.charts.Bar.convertOptions(options));
    }
</script>

