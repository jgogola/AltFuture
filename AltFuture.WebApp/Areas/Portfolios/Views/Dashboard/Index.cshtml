@using AltFuture.DataAccessLayer.Models.StoredProcs;
@model IEnumerable<PortfolioSummaryGetAll>
@{
    ViewData["Title"] = "Portfolio Dashboard";
    var bodyData = Model.Where(crypto => crypto.RowType == 1).ToList();
    var footerData = Model.Where(crypto => crypto.RowType == 99).ToList().FirstOrDefault();
}


<h1>Portfolio Dashboard</h1>

<nav class="navbar navbar-expand-sm navbar-light bg-light">
    <div class="container-fluid">
        <div id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" asp-controller="Transactions" asp-action="Index">Transaction Details</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" asp-controller="TransactionImports" asp-action="Index">Import New Transactions</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-4">
            <!--Div for Asset Allocation Pie Chart-->
            <div id="chartAssetAllocation"></div>
        </div>
        <div class="col-md-4">
            <!--Div for Asset Performance Column Chart-->
            <div id="chartAssetPerformance"></div>
        </div>
        <div class="col-md-4">
            <!--Div for Exchange Usage Pie Chart-->
            <div id="chartExchangeUsage"></div>
        </div>
    </div>

</div>

<div class="container mt-1">
    <table class="table table-striped">
        <caption>Crypto Asset Portfolio</caption>
        <thead class="table-dark">
            <tr class="text-center">
                <th scope="col">@Html.DisplayNameFor(model => model.CryptoName)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.TickerSymbol)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.NumberOfOrders)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.Quantity)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.AverageBuyPrice)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.Price)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.InvestmentTotal)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.FeeTotal)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.UnrealizedProfit)</th>
                <th scope="col">@Html.DisplayNameFor(model => model.CurrentWorth)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var crypto in bodyData)
            {
                <tr>
                    <td class="text-nowrap">@crypto.CryptoName</td>
                    <th class="text-center" scope="row">@crypto.TickerSymbol</th>
                    <td class="text-center">@crypto.NumberOfOrders</td>
                    <td class="text-center">@crypto.Quantity</td>
                    <td class="text-end">@crypto.AverageBuyPrice</td>
                    <td class="text-end">@crypto.Price</td>
                    <td class="text-end text-success">@crypto.InvestmentTotal</td>
                    <td class="text-end text-danger">@crypto.FeeTotal</td>
                    <td class="text-end @(crypto.UnrealizedProfit >= 0 ? "table-success" : "table-danger")">@crypto.UnrealizedProfit</td>
                    <td class="text-end fw-bold">@crypto.CurrentWorth</td>
                </tr>
            }
        </tbody>
        <tfoot class="table-secondary">
            <tr>
                <td>@footerData?.CryptoName</td>
                <th class="text-center" scope="row">@footerData?.TickerSymbol</th>
                <td class="text-center">@footerData?.NumberOfOrders</td>
                <td class="text-center">@footerData?.Quantity</td>
                <td class="text-end">------</td>
                <td class="text-end">------</td>
                <td class="text-end text-success">@footerData?.InvestmentTotal</td>
                <td class="text-end text-danger">@footerData?.FeeTotal</td>
                <td class="text-end @(footerData?.UnrealizedProfit >= 0 ? "table-success" : "table-danger")">@footerData?.UnrealizedProfit</td>
                <td class="text-end fw-bold">@footerData?.CurrentWorth</td>
            </tr>
        </tfoot>
    </table>

</div>

<partial name="Partials/_UserMessage" />


<!--Load the Google Chart AJAX API-->
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>


<script type="text/javascript">

    // Load the Visualization API and the corechart package.
    google.charts.load('current', {'packages':['corechart']});
    google.charts.load('current', { 'packages': ['bar'] });

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawAssetAllocationChart);
    google.charts.setOnLoadCallback(drawAssetPerformanceChart);
    google.charts.setOnLoadCallback(drawExchangeUsageChart);


    // Asset Allocation Pie Chart
    function drawAssetAllocationChart() {
        let jsonData;

        // Get data
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAssetAllocationData", "Dashboard")",
            dataType: "json",
            async: false,
             success: function (d) {
                jsonData = d;
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("Error: " + textStatus, errorThrown);
            }
        });

        // Create our data table out of JSON data loaded from server.
        const data = new google.visualization.arrayToDataTable(jsonData);

        // Set chart options 
        const options = {
            title: 'Crypto Investment Allocation',
            width:400,
            height:300,
            pieHole: 0.3,
        };

        // Instantiate and draw our chart, passing in some options.
        const chart = new google.visualization.PieChart(document.getElementById('chartAssetAllocation'));
        chart.draw(data, options);
    }
   
    
    // Asset Performance Column Chart
    function drawAssetPerformanceChart() {

        let jsonData;

        // Get data
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAssetPerformanceData", "Dashboard")",
            dataType: "json",
            async: false,
            success: function (d) {
                jsonData = d;
                console.log(jsonData);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("Error: " + textStatus, errorThrown);
            }
        });

        let data = new google.visualization.arrayToDataTable(jsonData);

        let options = {
            chart: {
                title: 'Crypto Investment Performance',
                subtitle: 'Investements and Current Worth',
               
            },
            colors: ['#3366cc', '#109618'],
           
        };

        let chart = new google.charts.Bar(document.getElementById('chartAssetPerformance'));
        chart.draw(data, google.charts.Bar.convertOptions(options));
    }


    // Exchange Usage Pie Chart
    function drawExchangeUsageChart() {
        let jsonData;

        // Get data
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetExchangeUsageData", "Dashboard")",
            dataType: "json",
            async: false,
            success: function (d) {
                jsonData = d;
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("Error: " + textStatus, errorThrown);
            }
        });

        // Create our data table out of JSON data loaded from server.
        let data = new google.visualization.arrayToDataTable(jsonData);

        // Set chart options
        let options = {
            'title': 'Exchange Usage',
            'width': 400,
            'height': 300,
            'is3D': true
        };

        // Instantiate and draw our chart, passing in some options.
        let chart = new google.visualization.PieChart(document.getElementById('chartExchangeUsage'));
        chart.draw(data, options);
    }
</script>

